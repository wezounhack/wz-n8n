stages:
  - build
  - test
  - push
  - prepare_vps
  - deploy

variables:
  DOCKER_REPO: wezoun/n8n
  DEPLOY_USER: deploy

# 1. Construction de l’image Docker
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker info
    - docker build -t $DOCKER_REPO:latest .
    - docker tag $DOCKER_REPO:latest $DOCKER_REPO:${CI_COMMIT_SHORT_SHA}
  only:
    - main

# 2. Test rapide de l’image
test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run -d --name test_n8n -p 5678:5678 $DOCKER_REPO:latest
    - sleep 10
    - |
      if curl -fsS http://localhost:5678; then
        echo "Test réussi"
        docker stop test_n8n
        docker rm test_n8n
      else
        echo "Test échoué"
        docker logs test_n8n || true
        docker stop test_n8n || true
        docker rm test_n8n
        exit 1
      fi
  only:
    - main

# 3. Pousser l’image Docker sur Docker Hub
push:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker push $DOCKER_REPO:latest
    - docker push $DOCKER_REPO:${CI_COMMIT_SHORT_SHA}
  only:
    - main

# 4. Préparer le VPS (installation Docker, création user, scripts)
prepare_vps:
  stage: prepare_vps
  image: alpine:latest
  before_script:
    - apk add --no-cache bash openssh sshpass
  script:
    - |
      echo "=== Préparer le VPS avec mot de passe ==="

      # Remplacer par tes secrets dans GitLab
      # VPS_ADMIN_IP: IP sans points, exemple : 192-168-1-100
      # VPS_ADMIN_USER
      # VPS_SSH_PASSWORD
      # DEPLOY_USER (ex: deploy)

      # Convertir l'adresse IP
      VPS_IP=$(echo "$VPS_ADMIN_IP" | tr '-' '.')

      # Se connecter en SSH avec sshpass
      sshpass -p "$VPS_SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_ADMIN_USER@$VPS_IP" bash -s -- <<EOF

        set -e

        # Installer Docker si absent
        if ! command -v docker > /dev/null; then
          apk add --no-cache curl bash
          curl -fsSL https://get.docker.com | sh
          addgroup docker
          adduser -D $DEPLOY_USER
          adduser $DEPLOY_USER docker
        fi

        # Créer le répertoire deploy
        mkdir -p /home/$DEPLOY_USER
        chown -R $DEPLOY_USER:$DEPLOY_USER /home/$DEPLOY_USER

        # Écrire le script deploy_n8n.sh
        cat > /home/$DEPLOY_USER/deploy_n8n.sh << 'EOL'
#!/bin/bash
set -euo pipefail

IMAGE="${1:-votre-dockerhub-username/n8n:latest}"
CONTAINER_NAME="n8n"
DATA_DIR="/home/$USER/.n8n"

mkdir -p "$DATA_DIR"

echo "Déploiement de l'image $IMAGE..."

if docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
  CURRENT_IMAGE=$(docker inspect --format='{{.Config.Image}}' "$CONTAINER_NAME" || true)
  echo "$CURRENT_IMAGE" > "/home/$USER/.n8n_last_tag" || true
fi

docker pull "$IMAGE"

docker stop "$CONTAINER_NAME" || true
docker rm "$CONTAINER_NAME" || true

docker run -d \
  --name "$CONTAINER_NAME" \
  --restart unless-stopped \
  --env-file "/home/$USER/n8n.env" \
  -v "$DATA_DIR:/home/node/.n8n" \
  -p 5678:5678 \
  --health-cmd='curl -fsS http://localhost:5678/ || exit 1' \
  --health-
