stages:
  - build
  - test
  - push
  - prepare_vps
  - deploy

variables:
  DOCKER_REPO: wezoun/n8n
  DEPLOY_USER: deploy

# 1. Construction de l’image
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker info
    - docker build -t $DOCKER_REPO:latest .
    - docker tag $DOCKER_REPO:latest $DOCKER_REPO:${CI_COMMIT_SHORT_SHA}
  only:
    - main

# 2. Test de l’image
test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run -d --name test_n8n -p 5678:5678 $DOCKER_REPO:latest
    - sleep 10
    - |
      if curl -fsS http://localhost:5678; then
        echo "Test réussi"
        docker stop test_n8n
        docker rm test_n8n
      else
        echo "Test échoué"
        docker logs test_n8n || true
        docker stop test_n8n || true
        docker rm test_n8n
        exit 1
      fi
  only:
    - main

# 3. Pousser l’image
push:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker push $DOCKER_REPO:latest
    - docker push $DOCKER_REPO:${CI_COMMIT_SHORT_SHA}
  only:
    - main

# 4. Préparer le VPS (installation Docker, création user, scripts) -- via SSH
prepare_vps:
  stage: prepare_vps
  image: alpine:latest
  before_script:
    - apk add --no-cache bash openssh sshpass
  script:
    - |
      echo "=== Préparer le VPS avec mot de passe ==="
      # Définir les variables dans GitLab
      # VPS_ADMIN_IP (sans point, par ex 192-168-1-100)
      # VPS_ADMIN_USER
      # VPS_SSH_PASSWORD
      # DEPLOY_USER
      
      # Convertir l'adresse IP
      VPS_IP=$(echo "$VPS_ADMIN_IP" | tr '-' '.')

      sshpass -p "$VPS_SSH_PASSWORD" ssh -o StrictHostKeyChecking=no "$VPS_ADMIN_USER@$VPS_IP" bash -s -- <<EOF
        set -e

        # Installer Docker si absent
        if ! command -v docker > /dev/null; then
          apk add --no-cache curl bash
          curl -fsSL https://get.docker.com | sh
          addgroup
