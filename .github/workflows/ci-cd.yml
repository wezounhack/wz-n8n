stages:
  - build
  - test
  - push
  - prepare_vps
  - deploy

variables:
  DOCKER_REPO: wezoun/n8n
  DEPLOY_USER: deploy

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker info
    - docker build -t $DOCKER_REPO:latest .
    - docker tag $DOCKER_REPO:latest $DOCKER_REPO:${CI_COMMIT_SHORT_SHA}
  only:
    - main

test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run -d --name test_n8n -p 5678:5678 $DOCKER_REPO:latest
    - sleep 10
    - |
      if curl -fsS http://localhost:5678; then
        echo "Test OK"
        docker stop test_n8n
        docker rm test_n8n
      else
        echo "Test KO"
        docker logs test_n8n || true
        docker stop test_n8n || true
        docker rm test_n8n
        exit 1
      fi
  only:
    - main

push:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker push $DOCKER_REPO:latest
    - docker push $DOCKER_REPO:${CI_COMMIT_SHORT_SHA}
  only:
    - main

prepare_vps:
  stage: prepare_vps
  image: alpine:latest
  before_script:
    - apk add --no-cache bash openssh sshpass
  script:
    - |
      echo "=== Connexion au VPS via mot de passe et préparation ==="

      # Variables à définir dans CI/CD secrets
      # VPS_ADMIN_IP, VPS_ADMIN_USER, VPS_SSH_PASSWORD, DEPLOY_USER

      # Créer le user deploy si inexistant et ajouter au groupe docker
      sshpass -p "$VPS_SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $VPS_ADMIN_USER@$VPS_ADMIN_IP <<EOF
        set -e

        # Installer Docker si nécessaire
        if ! command -v docker > /dev/null; then
          apk add --no-cache curl bash
          curl -fsSL https://get.docker.com | sh
          addgroup docker
          adduser -D $DEPLOY_USER
          adduser $DEPLOY_USER docker
        fi

        # Créer le répertoire deploy et ajuster ownership
        mkdir -p /home/$DEPLOY_USER
        chown -R $DEPLOY_USER:$DEPLOY_USER /home/$DEPLOY_USER

        # Écrire le fichier n8n.env dans le home de deploy
      #  cat > /home/$DEPLOY_USER/n8n.env <<EOL
# N8N_HOST=${N8N_HOST}
# N8N_PORT=${N8N_PORT}
# N8N_PROTOCOL=${N8N_PROTOCOL}
# N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
# N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
# N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
# N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
# DB_TYPE=${DB_TYPE}
# DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
# DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE}
# DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
# DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
# EOL
       #  chown $DEPLOY_USER:$DEPLOY_USER /home/$DEPLOY_USER/n8n.env
       # chmod 600 /home/$DEPLOY_USER/n8n.env

        # Écrire le script deploy_n8n.sh
        cat > /home/$DEPLOY_USER/deploy_n8n.sh <<'EOL'
#!/bin/bash
set -euo pipefail

IMAGE="${1:-votre-dockerhub-username/n8n:latest}"
CONTAINER_NAME="n8n"
DATA_DIR="/home/$USER/.n8n"
ENV_FILE="/home/$USER/n8n.env"

mkdir -p "$DATA_DIR"

echo "Déploiement de l'image $IMAGE..."

if docker ps -a --format '{{.Names}}' | grep -q "^$CONTAINER_NAME$"; then
  CURRENT_IMAGE=$(docker inspect --format='{{.Config.Image}}' "$CONTAINER_NAME" || true)
  echo "$CURRENT_IMAGE" > "/home/$USER/.n8n_last
